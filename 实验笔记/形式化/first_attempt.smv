MODULE main
VAR
pr1: process prc(pr2.st);
pr2: process prc(pr1.st);
--safety
LTLSPEC G!((pr1.st = c) & (pr2.st = c))
-- liveness
LTLSPEC G((pr1.st = t) -> F (pr1.st = c))
LTLSPEC G((pr2.st = t) -> F (pr2.st = c))
-- non-blocking
CTLSPEC AG( (pr1.st = n) -> (EX pr1.st = t) )
CTLSPEC AG( (pr2.st = n) -> (EX pr2.st = t) )
--no strict sequencing
CTLSPEC EF ( pr1.st = c & E[(pr1.st = c) U (!(pr1.st = c) & E [!(pr2.st = c) U (pr1.st = c)])] )
CTLSPEC EF ( pr1.st = c & E[(pr1.st = c) U (!(pr1.st = c) & E [!(pr2.st = c) U (pr1.st = c)])] )

MODULE prc(other-st)
VAR
st: {n, t, c};
ASSIGN
init(st) :=n;
next(st) :=
case
    (st = n): t;
    (st = t) & (other-st != c) :c;
    (st = c): n;
    TRUE :st;
esac;

FAIRNESS running

